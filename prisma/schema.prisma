// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  emailVerified      DateTime?
  imageKey           String?
  accounts           Account[]
  sessions           Session[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  CreatedProject     Project[] @relation("ProjectCreator")
  AdminOf            Project[] @relation("AssignedAdmin")
  AssignedToProjecct Project[] @relation("AssignedUser")
  AssignedToTask     Task[]    @relation("AssignedTaskUser")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Project {
  id             String   @id @default(cuid())
  title          String
  description    String?
  status         Status   @default(TODO)
  adminId        String
  assignedAdmins User[]   @relation("AssignedAdmin")
  assignedUsers  User[]   @relation("AssignedUser")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Tasks          Task[]   @relation("ProjectTask")
  createdBy      User     @relation("ProjectCreator", fields: [adminId], references: [id], onDelete: Restrict)
}

model Task {
  id             String   @id @default(cuid())
  title          String
  description    String?
  status         Status   @default(TODO)
  creatorId      String
  assignedUserId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  assignedUser   User?    @relation("AssignedTaskUser", fields: [assignedUserId], references: [id], onDelete: SetNull)
  projectId      String?
  Project        Project? @relation("ProjectTask", fields: [projectId], references: [id])
}

enum Status {
  TODO
  ONHOLD
  ONGOING
  COMPLETED
}
